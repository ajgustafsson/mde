[comment encoding = UTF-8 /]
[module MainSystem('Group2')]

[template public mainSystem(aMainSystem : MainSystem)]
[comment @main/]
[file (aMainSystem.eClass().name + '.java', false, 'UTF-8')]

package model;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import Engine.EngineFactory;
import Engine.Node;
import Engine.Task;
import Engine.TaskState;
import Engine.Workflow;

public class [aMainSystem.eClass().name/] {
	
	Map<String, Workflow> workflows = new HashMap<>();
	
	public [aMainSystem.eClass().name/]() {
		
	[for (workflow : Workflow | aMainSystem.workflows)]

		Workflow [workflow.name/] = EngineFactory.eINSTANCE.createWorkflow();
		List<Node> nodes = [workflow.name/].getNodes();
		[for (task : Task | workflow.nodes->select(oclIsKindOf(Task)).oclAsType(Task))]
		
			Task [task.name/] = EngineFactory.eINSTANCE.createTask();
			[task.name/].setName("[task.name/]");
			[task.name/].setState(TaskState.[task.state/]);
			[task.name/].setEnd([task.end/]);
			[task.name/].setStart([task.start/]);
			nodes.put([task.name/].getName(), [task.name/]);
			System.out.println([task.name/].getName() + [task.name/].getState());

[comment]	`		[task.transition./][/comment]
			
		[/for]

	workflows.put("[workflow.name/]", [workflow.name/]);
	[/for]
	}


}
	
[for (workflow : Workflow | aMainSystem.workflows)]
[file (workflow.eClass().name + '.java', false, 'UTF-8')]
package model;
import java.util.Map;
import Engine.EnginePackage;
import Engine.impl.TaskImpl;
import Engine.TaskState;

public class [workflow.eClass().name/] {
	
//	public HashMap<String,Transition> transitions = new HashMap<String,Transition>();




	public Workflow() {}


	public static void main(String args) {
		Map<String,TaskImpl> tasks = new HashMap<String,TaskImpl>();
	
		[for (task : Task | workflow.nodes->select(oclIsKindOf(Task)).oclAsType(Task))]
		
			Task [task.name/] = EngineFactory.createTask();
			[task.name/].setName("[task.name/]");
			[task.name/].setState(TaskState.[task.state/]);
			[task.name/].setEnd([task.end/]);
			[task.name/].setStart([task.start/]);
			tasks.put([task.name/].getName(), [task.name/]);
			tasks.put("asdf", [task/]);
			System.out.println([task.name/].getName() + [task.name/].getState());
			
		[/for]
	}
	[for (simple : Simple | workflow.nodes->select(oclIsKindOf(Simple)).oclAsType(Simple))]
    SimpleImpl [simple.name/] = new SimpleImpl([simple.name/], tasks.get("[simple.task/]"), tasks.get("[simple.previousTasks/]"));
	[simple.name/].setName([simple.name/]);
	[simple.name/].setTask([simple.task/]);
[comment]	[simple.name/].setPreviousTask([simple.previousTasks]);[/comment]
	transitions.put("[simple/]","[simple.name/]");
	[/for]
	
	
	}		
	[/file]
	[/for]


[/file]
[/template]

[template public instansiateNode(node : Node)]
[file ('noodes' + '.java', false, 'UTF-8')]
public abstract class Node {
 
	public [node.name/];
	
}
[/file]
[/template]
